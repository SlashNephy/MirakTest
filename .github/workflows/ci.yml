name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
    paths-ignore:
      - .gitignore
      - LICENSE
      - "**.md"

jobs:
  lint:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn --ignore-scripts
      - name: Lint
        run: |
          yarn lint
  prepare-webchimera-ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    env:
      VLC_VER: 3.0.11.1
      ELECTRON_VER: 12.0.1
      BUILD_DIR: ./build/Release
      npm_config_wcjs_runtime: electron
      npm_config_wcjs_runtime_version: 12.0.1
      npm_config_wcjs_arch: x64

    steps:
      - uses: actions/checkout@v2
        with:
          repository: "RSATom/WebChimera.js"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-wc
          restore-keys: |
            ${{ runner.os }}-yarn-wc-
      - name: Prepare
        run: |
          git submodule update --init --recursive
          sudo apt-get install build-essential cmake libvlc-dev
      - name: Build
        run: |
          if [[ "$npm_config_wcjs_runtime" = "electron" && "$npm_config_wcjs_runtime_version" = "latest" ]]; then export npm_config_wcjs_runtime_version=`npm show electron version`; fi
          export WCJS_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_${npm_config_wcjs_runtime_version}_${npm_config_wcjs_arch}_${OS_NAME}.zip
          export WCJS_ARCHIVE_PATH=$BUILD_DIR/$WCJS_ARCHIVE
          export WCJS_FULL_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_v${npm_config_wcjs_runtime_version}_VLC_v${VLC_VER}_${npm_config_wcjs_arch}_${OS_NAME}.tar.gz
          if [ "$OS_NAME" = "macOS" ]; then export WCJS_FULL_ARCHIVE_PATH=$BUILD_DIR/$WCJS_FULL_ARCHIVE; else export WCJS_FULL_ARCHIVE_PATH=$WCJS_ARCHIVE_PATH; fi
          yarn install
        env:
          OS_NAME: ${{ runner.os }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: wc-${{ runner.os }}
          path: ${{ env.BUILD_DIR }}/WebChimera.js.node
  build-ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: prepare-webchimera-ubuntu

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: |
          sudo apt-get install build-essential cmake libvlc-dev
      - name: Install
        run: |
          yarn
      - uses: actions/download-artifact@v2
        with:
          name: wc-${{ runner.os }}
      - name: WC Prepare
        run: |
          mv WebChimera.js.node node_modules/webchimera.js
          echo "module.exports = require('./WebChimera.js.node')" > node_modules/webchimera.js/index.js
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-dist
          path: |
            dist
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build-image
          path: |
            build/*.AppImage
            build/*.tar.gz
  prepare-webchimera-macos:
    runs-on: macOS-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    env:
      VLC_VER: 3.0.11.1
      ELECTRON_VER: 12.0.1
      BUILD_DIR: ./build/Release
      npm_config_wcjs_runtime: electron
      npm_config_wcjs_runtime_version: 12.0.1
      npm_config_wcjs_arch: x64

    steps:
      - uses: actions/checkout@v2
        with:
          repository: "RSATom/WebChimera.js"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-wc
          restore-keys: |
            ${{ runner.os }}-yarn-wc-
      - name: Prepare
        run: |
          git submodule update --init --recursive
          curl -L -o ./deps/vlc-$VLC_VER.dmg http://get.videolan.org/vlc/$VLC_VER/macosx/vlc-$VLC_VER.dmg
          hdiutil mount ./deps/vlc-$VLC_VER.dmg
          cp -R "/Volumes/VLC media player/VLC.app" ./deps
      - name: Build
        run: |
          if [[ "$npm_config_wcjs_runtime" = "electron" && "$npm_config_wcjs_runtime_version" = "latest" ]]; then export npm_config_wcjs_runtime_version=`npm show electron version`; fi
          export WCJS_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_${npm_config_wcjs_runtime_version}_${npm_config_wcjs_arch}_${OS_NAME}.zip
          export WCJS_ARCHIVE_PATH=$BUILD_DIR/$WCJS_ARCHIVE
          export WCJS_FULL_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_v${npm_config_wcjs_runtime_version}_VLC_v${VLC_VER}_${npm_config_wcjs_arch}_${OS_NAME}.tar.gz
          if [ "$OS_NAME" = "macOS" ]; then export WCJS_FULL_ARCHIVE_PATH=$BUILD_DIR/$WCJS_FULL_ARCHIVE; else export WCJS_FULL_ARCHIVE_PATH=$WCJS_ARCHIVE_PATH; fi
          yarn install
        env:
          OS_NAME: ${{ runner.os }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: wc-${{ runner.os }}
          path: |
            ${{ env.BUILD_DIR }}/WebChimera.js.node
      - name: Archive vlc artifact
        run: |
          cd deps/VLC.app/Contents/MacOS
          zip -rq ../vlc_lib.zip .
      - name: Upload vlc artifact
        uses: actions/upload-artifact@v2
        with:
          name: vlc-${{ runner.os }}
          path: deps/VLC.app/Contents/vlc_lib.zip
  build-macos:
    runs-on: macOS-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: prepare-webchimera-macos

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get brew cache directory
        id: brew-cache
        run: echo "::set-output name=dir::$(brew --cache)/downloads"
      - name: Brew cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.brew-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-brew-
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: |
          brew install vlc
          brew install cmake
      - name: Install
        run: |
          yarn
      - uses: actions/download-artifact@v2
        with:
          name: wc-${{ runner.os }}
      - uses: actions/download-artifact@v2
        with:
          name: vlc-${{ runner.os }}
      - name: VLC related libs are licensed under LGPL and GPLv2
        run: |
          mv WebChimera.js.node node_modules/webchimera.js
          echo "module.exports = require('./WebChimera.js.node')" > node_modules/webchimera.js/index.js
          mkdir vlc_lib
          unzip -q vlc_lib.zip -d vlc_lib
          cp -r vlc_lib/lib node_modules/webchimera.js/lib
          mkdir node_modules/webchimera.js/lib/vlc
          cp -r vlc_lib/{lib,plugins,share} node_modules/webchimera.js/lib/vlc
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-dist
          path: |
            dist
      - name: Upload build-image artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build-image
          path: |
            build/*.dmg
