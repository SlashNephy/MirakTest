name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
    paths-ignore:
      - .gitignore
      - LICENSE
      - "**.md"
  pull_request:
    paths-ignore:
      - .gitignore
      - LICENSE
      - "**.md"

jobs:
  lint:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x]

    if: ${{ github.event_name != 'pull_request' || github.repository_owner != 'ci7lus' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn --ignore-scripts
      - name: Lint
        run: |
          yarn lint:prettier
          yarn lint:eslint
      - name: Typecheck
        run: |
          yarn tsc
  build-ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    if: ${{ github.event_name != 'pull_request' || github.repository_owner != 'ci7lus' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: sudo apt-get install cmake=3.16.3-1ubuntu1 libvlc-dev=3.0.9.2-1
      - name: Install
        run: yarn
      - name: Build webchimera.js
        run: ./setup_wcjs.sh
      - name: Build
        run: yarn build
      - name: Pack build artifact
        run: zip -rq build.zip ./build -x 'build/*.AppImage' -x 'build/*.tar.gz'
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build
          path: build.zip
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-dist
          path: dist
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build-image
          path: |
            build/*.AppImage
            build/*.tar.gz
  build-macos:
    runs-on: macos-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    if: ${{ github.event_name != 'pull_request' || github.repository_owner != 'ci7lus' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download VLC
        run: |
          wget https://github.com/vivid-lapin/vlc-miraktest/releases/download/3.0.14.1/vlc-3.0.14.dmg -O /tmp/vlc.dmg
          hdiutil mount /tmp/vlc.dmg
          cp -Ra "/Volumes/VLC media player/VLC.app" /Applications
      - name: Install
        run: yarn
      - name: Build webchimera.js
        run: ./setup_wcjs.sh
      - name: VLC related libs are licensed under LGPL and GPLv2
        run: ./setup_vlclib_mac.sh
      - name: Build
        run: yarn build
      - name: Pack build artifact
        run: zip -rq build.zip ./build -x 'build/*.dmg'
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build
          path: build.zip
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-dist
          path: dist
      - name: Upload build-image artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build-image
          path: build/*.dmg
  build-windows:
    runs-on: windows-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    if: ${{ github.event_name != 'pull_request' || github.repository_owner != 'ci7lus' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn --ignore-scripts
      - name: Setup for windows
        run: pwsh ./setup_wcjs.ps1
      - name: Build
        run: yarn build
      - name: Pack build artifact
        run: powershell Compress-Archive -Path build -DestinationPath build.zip
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-build
          path: build.zip
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-dist
          path: dist
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-build-image
          path: |
            build/*.exe
            build/*.zip
