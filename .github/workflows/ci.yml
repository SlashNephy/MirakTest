name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
    paths-ignore:
      - .gitignore
      - LICENSE
      - "**.md"
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn --ignore-scripts
      - name: Lint
        run: |
          yarn lint
      - name: Typecheck
        run: |
          yarn tsc
  build-ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: |
          sudo apt-get install build-essential cmake libvlc-dev
      - name: Install
        run: |
          yarn
      - name: Build webchimera.js
        run: ./setup_wcjs.sh
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-dist
          path: |
            dist
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build-image
          path: |
            build/*.AppImage
            build/*.tar.gz
  build-macos:
    runs-on: macOS-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install VLC
        run: |
          wget https://raw.githubusercontent.com/Homebrew/homebrew-cask/d1d695e55a15ed145c01c0cf52c9db3210a7d0c2/Casks/vlc.rb
          brew install vlc.rb
      - name: Install
        run: |
          yarn
      - name: Build webchimera.js
        run: ./setup_wcjs.sh
      - name: VLC related libs are licensed under LGPL and GPLv2
        run: ./setup_vlclib_mac.sh
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-dist
          path: |
            dist
      - name: Upload build-image artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build-image
          path: |
            build/*.dmg
