name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
    paths-ignore:
      - .gitignore
      - LICENSE
      - "**.md"

jobs:
  lint:
    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn --ignore-scripts
      - name: Lint
        run: |
          yarn lint
  build-ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install deps
        run: |
          sudo apt-get install build-essential cmake libvlc-dev
      - name: Install
        run: |
          yarn
      - name: Build webchimera.js
        run: |
          cd node_modules/webchimera.js
          git submodule update --init --recursive
          if [[ "$npm_config_wcjs_runtime" = "electron" && "$npm_config_wcjs_runtime_version" = "latest" ]]; then export npm_config_wcjs_runtime_version=`npm show electron version`; fi
          export WCJS_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_${npm_config_wcjs_runtime_version}_${npm_config_wcjs_arch}_${OS_NAME}.zip
          export WCJS_ARCHIVE_PATH=$BUILD_DIR/$WCJS_ARCHIVE
          export WCJS_FULL_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_v${npm_config_wcjs_runtime_version}_VLC_v${VLC_VER}_${npm_config_wcjs_arch}_${OS_NAME}.tar.gz
          if [ "$OS_NAME" = "macOS" ]; then export WCJS_FULL_ARCHIVE_PATH=$BUILD_DIR/$WCJS_FULL_ARCHIVE; else export WCJS_FULL_ARCHIVE_PATH=$WCJS_ARCHIVE_PATH; fi
          yarn install
          mv ./build/Release/WebChimera.js.node .
          rm -rf node_modules deps build
          echo "module.exports = require('./WebChimera.js.node')" > index.js
        env:
          OS_NAME: ${{ runner.os }}
          VLC_VER: 3.0.12
          ELECTRON_VER: 12.0.1
          BUILD_DIR: ./build/Release
          npm_config_wcjs_runtime: electron
          npm_config_wcjs_runtime_version: 12.0.1
          npm_config_wcjs_arch: x64
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-dist
          path: |
            dist
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build-image
          path: |
            build/*.AppImage
            build/*.tar.gz
  build-macos:
    runs-on: macOS-latest

    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [12.x]

    needs: lint

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install VLC
        run: |
          wget https://raw.githubusercontent.com/Homebrew/homebrew-cask/d1d695e55a15ed145c01c0cf52c9db3210a7d0c2/Casks/vlc.rb
          brew install vlc.rb
      - name: Install
        run: |
          yarn
      - name: Build webchimera.js
        run: |
          cd node_modules/webchimera.js
          git submodule update --init --recursive
          cp -R /Applications/VLC.app ./deps
          if [[ "$npm_config_wcjs_runtime" = "electron" && "$npm_config_wcjs_runtime_version" = "latest" ]]; then export npm_config_wcjs_runtime_version=`npm show electron version`; fi
          export WCJS_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_${npm_config_wcjs_runtime_version}_${npm_config_wcjs_arch}_${OS_NAME}.zip
          export WCJS_ARCHIVE_PATH=$BUILD_DIR/$WCJS_ARCHIVE
          export WCJS_FULL_ARCHIVE=WebChimera.js_${npm_config_wcjs_runtime}_v${npm_config_wcjs_runtime_version}_VLC_v${VLC_VER}_${npm_config_wcjs_arch}_${OS_NAME}.tar.gz
          if [ "$OS_NAME" = "macOS" ]; then export WCJS_FULL_ARCHIVE_PATH=$BUILD_DIR/$WCJS_FULL_ARCHIVE; else export WCJS_FULL_ARCHIVE_PATH=$WCJS_ARCHIVE_PATH; fi
          yarn install
          mv ./build/Release/WebChimera.js.node .
          rm -rf node_modules deps build
          echo "module.exports = require('./WebChimera.js.node')" > index.js
        env:
          OS_NAME: ${{ runner.os }}
          VLC_VER: 3.0.12
          ELECTRON_VER: 12.0.1
          BUILD_DIR: ./build/Release
          npm_config_wcjs_runtime: electron
          npm_config_wcjs_runtime_version: 12.0.1
          npm_config_wcjs_arch: x64
      - name: VLC related libs are licensed under LGPL and GPLv2
        run: |
          cp -Ra /Applications/VLC.app/Contents/MacOS/lib vlc_libs
          mkdir vlc_libs/vlc
          cp -Ra /Applications/VLC.app/Contents/MacOS/{plugins,share} vlc_libs/vlc
          rm -rf vlc_libs/vlc/share/locale
      - name: Build
        run: |
          yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build
          path: |
            build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-dist
          path: |
            dist
      - name: Upload build-image artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-build-image
          path: |
            build/*.dmg
